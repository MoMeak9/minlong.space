
"smart_sources:翻译/「译」为 Rust 及所有语言优化 WebAssembly.md": {"path":"翻译/「译」为 Rust 及所有语言优化 WebAssembly.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"31b94db262401aa4537f73c9c7652cfafc4e9b486c5660b058c9a7574cbb4b40","at":1751101012215},"class_name":"SmartSource","outlinks":[{"title":"![Rust logo and JS logo with a heart in between","target":"https://fs.yihuiblog.top/i/2025/06/15/8abc709c-bf8a-6b82-c4e2-4b47406c67fc-0.png","line":15},{"title":"解析源码映射","target":"https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/","line":17},{"title":"Ember","target":"https://www.youtube.com/watch?v=qfnkDyHVJzs&feature=youtu.be&t=5880","line":17},{"title":"![Pipeline from compiling, to generating bindings, to packaging, to bundling","target":"https://fs.yihuiblog.top/i/2025/06/15/8ddd9fb4-feed-9bd5-034a-91b6ce930c16-0.png","line":23},{"title":"npm","target":"https://www.npmjs.com/","line":28},{"title":"![Rust crate graph","target":"https://fs.yihuiblog.top/i/2025/06/15/bdd2d31c-8e82-da1e-2999-2518fed33c89-0.png","line":35},{"title":"wasm-bindgen","target":"https://github.com/alexcrichton/wasm-bindgen","line":41},{"title":"![Encoder ring encoding Hello into number equivalent","target":"https://fs.yihuiblog.top/i/2025/06/15/6bddb065-8ed2-f01a-a50f-68c686e91288-0.png","line":48},{"title":"![JS putting numbers into WebAssembly's memory","target":"https://fs.yihuiblog.top/i/2025/06/15/820920ec-d4fc-9de1-fa4c-bc404202295e-0.png","line":50},{"title":"![img","target":"https://hacks.mozilla.org/wp-content/uploads/2018/03/04_wasm_bindgen_03-500x295.png","line":52},{"title":"![img","target":"https://fs.yihuiblog.top/i/2025/06/15/11a78968-e8f8-466b-8e33-0eb55cfb66f8-0.png","line":54},{"title":"![JS passing the string Hello to wasm-bindgen, which does all of the other work","target":"https://hacks.mozilla.org/wp-content/uploads/2018/03/05_wasm_bindgen_2-500x261.png","line":62},{"title":"![module graph with JS and WASM modules","target":"https://fs.yihuiblog.top/i/2025/06/15/5c6de96d-623b-382c-96c8-4beee27e5960-0.png","line":120},{"title":"![import {myFunction} from \"myModule.wasm\"","target":"https://fs.yihuiblog.top/i/2025/06/15/e2b767f6-a431-1bdd-180c-7f7e8a95fb35-0.png","line":126},{"title":"![a module graph being combined into a single file","target":"https://hacks.mozilla.org/wp-content/uploads/2018/03/18_bundle_graph_02-500x296.png","line":134},{"title":"帮助您入门 ","target":"http://fitzgeraldnick.com/2018/02/27/wasm-domain-working-group.html","line":142}],"blocks":{"#":[1,38],"##{1}":[27,27],"##{2}":[28,28],"##{3}":[29,38],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？":[39,111],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{1}":[41,46],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{2}":[47,47],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{3}":[48,48],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{4}":[49,49],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{5}":[50,50],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{6}":[51,51],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{7}":[52,52],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{8}":[53,53],"###问：如何简化 WebAssembly 与 JS 之间的对象传递？#{9}":[54,111],"###问：开发者如何轻松地在打包工具、浏览器或 Node 中结合使用 JS 和 WASM？":[112,139],"###问：开发者如何轻松地在打包工具、浏览器或 Node 中结合使用 JS 和 WASM？#{1}":[114,139],"###结语":[140,142],"###结语#{1}":[142,142]},"last_import":{"mtime":1749985857946,"size":9170,"at":1751101012216,"hash":"31b94db262401aa4537f73c9c7652cfafc4e9b486c5660b058c9a7574cbb4b40"}},